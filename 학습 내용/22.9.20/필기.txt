디자인적인 구분을 위해서 div는 괜찮다

장식적인 요소는 before, after를 활용하여 css로

웹 표준 확인법
- 브라우저 -> html validator 검색 -> w3c 마크업 밸리데이션 서비스

쓸모 없는 것들 남겨두는 것을 지양

OTF는 TTF의 개량된 버전

브라우저마다 소수점 처리가 다르기때문에 소수점없이

피그마에서 글씨가 들어간 이미지만,,
- 그룹에서 선택, 익스포트
- 원본말고

요소의 크기와 관련된 속성은 상속되지 않음

공통적으로 가져야 될 것들은 reset에

display:none로 숨기면 안됨
- hidden도 마찬가지
- 브라우저 입장에서 존재하지 않게됨
-- 읽을 수 없음

요소와 요소 사이의 간격은 마진
- 자기 안에 있는 요소들과의 간격은 패딩

html이 적은게 우선
- html 코드 양을 줄이는 것을 우선적으로 고려해라
- 스타일이 복잡하더라도
- 적절한게 중요...?

블록 포맷 컨텍스트를 생성하는 모든 속성들은 float를 잡는다

요소에 float을 넣게 되면 display 속성이 block으로 변경된다
- baseline이 삭제됨

flex와 grid는 float에 비해
- 묶어주는 요소가 필요하다
- 필연적으로 컨테이너 요소 발생
- 간단하게 끝낼 수 있으면 간단한 속성을 사용하는 것이 좋다

float되어있는 요소들끼리는 알아본다
- float 된 부모는 float된 자식을 알아본다

#################################
perspective (원근법)

perspective를 사용하면 3차원으로 웹이 렌더링을 함
- zindex는 해주지 않음
- 부모에게만 부여
-- 자식을 3차원 공간으로
-- 자신의 '직계' 자식만

translate3d
- translate 속성의 3D 버전
- 한번에 x, y, z 축을 모두 설정하는 것이 가능
- 3D 환경을 랜더링 하는 성능이 기존의 translate 속성보다 뛰어남
- 참고로 scale, rotate 속성역시 scale3d, rotate3d 가 존재
-- stew는 존재하지 않음

perspective는 우리가 대상을 보는 거리

위치에 따라 실점(vanishing point)을 바라보고 틀어지는 각도가 다름

소실점은 항상 컨테이너 요소의 중앙에 생성됨

perspective-origin
- 요소를 바라보는 사람의 위치
- x 50%, y 50%가 기본 (center)

object-fit: contain;
- 이미지 비율 원래대로
- 백그라운드 사이즈와 같음
-- 이미지 태그에서 background size

perspective는 직계 자식만 원근감을 줌
- 중간에서 ransform-style: preserve-3d; 적용하여 아래로 내려줌

backface-visibility: hidden;
- 뒷면 이미지를 숨겨줌
















