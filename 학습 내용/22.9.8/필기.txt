결과에 크게 신경쓰지 않는 모습
- 과정이 목적 자체가 되는 것

빔캠프
- 반응형 레이아웃 등

의도적으로 상세 페이지로 못가게 하려고 하는 페이지는 post로 처리
- 메인 페이지로 이동
- 나머지는 get 방식으로 처리

디자인을 위한 이미지에는 대체 텍스트를 사용하지 않음
- 어떤 정보를 전달할 것인가를 생각해야 함

이 수업에서 "나 잘하고 있는 걸까?"
- 어제보다 나아진 것인가..?
- 여기 있는 것?
-- 버티는 사람이 이긴다
-- 앉아 있으면 언젠가 목표를 달성할 수 있다

익스텐션 일일히 맞추지 마라
- 자동 도구 건의

html에 웬만하면 스타일을 주지말라는것이 기능적 분리뿐 아니라 CSS 구조에도 영향을 줌

리액트를 사용하는 가증 큰 이유
- 유지보수
- 빠른 생산성을 위해서는 아님

###########################
Reset CSS

너무 많은 브라우저들, 각자의 스타일
- 브라우저에 따라 보여지는 화면이 다르다

백엔드의 입장에서
- 백그라운드 이미지 -> 변경되지 않을 이미지, 컨트롤하지 않아도 되는 이미지

###########################
공백 처리, 주석 및 벤더프리픽스

css에서도 공백 병합

벤더 프리픽스
- 아직 비표준이거나 실험적인 CSS 속성을 특정 브라우저에서 실행할 수 있도록 CSS 속성 앞에 브라우저 제조사 만의 접두어(prefix)를 붙이는 문법

크로스 브라우징 할 때 몇 버전부터 몇 버전까지 호환할 것인지를 회의해야 함

autoprefixer로 지원 브라우저 설정 가능

############################
CSS Selector

범용 선택자, 타입 선택자, class 선택자, id 선택자

선택자 사이에도 우선순위 존재

############################
선택자 우선순위

후자 우선 원칙
- 동일한 선택자가 연속으로 사용될 경우 뒤에 있는 것을 선택 (같은 우선 순위)

구체성의 원칙
- 한 선택자가 다른 선택자보다 더 구체적으로 작성되었다면 구체적인 선택자가 우선됨

가중치
- 어떤 선택자가 더 구체적인가를 판단할 때 가중치를 기준으로 함
- id > class > type
-- 순서는 상관 없음
- 클래스가 아무리 많더라도 id보다 우선 순위가 높아지지는 않음

!important 속성을 이용하면
- 우선순위를 쉽게 변경하지만
- 순위 계산을 어렵게 만들기 때문에 인라인 스타일을 덮어 써야하는 등의 불가피한 상황이 아니라면 사용하지 않는 것을 권장

##############################
CSS Box Model

width, height 의 크기는 border, padding를 제외하고 계산한다.
- 컨텐츠의 크기만
- box-sizing: border-box; 속성을 통해 border 기준으로 width, height를 계산

block 박스와 inline 박스로 나누어짐

block
- width, height를 사용하여 컨트롤 할 수 있음
- 패딩과 마진, 보더 속성을 사용하여 스타일을 컨트롤 할 수 있으며 해당 속성들이 다른 요소들을 밀어냄

생기는 공백은 개행








