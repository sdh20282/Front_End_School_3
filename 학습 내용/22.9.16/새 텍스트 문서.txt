이력서 적당히 부풀려쓰자

requestanimationframe

사용자가 브라우저에 접속하면 어떤 과정을 통해 화면을 보여주는지

자바스크립트 비동기 처리

서버사이드/클라이언트 렌더링 차이 장단점


############################


좋은 코드의 조건 1
- 테스트 하기 좋은 코드
- 사용 직전과 직후
- 조금씩 범위 늘려나감
-- 기능별로 분리

좋은 코드의 조건 2
- 읽기 쉬울 것
- 대부분 협업
- 함수/변수 명 디테일하게

테스트 코드는 가능한 부분부터 작성하자

한 커밋에는 한가지 문제만
- 추적 가능하게
- 커밋은 가능한 적게

실험은 한 번에 하나씩만
- 익숙한 환경에서 실험 진행

나만의 학습 루틴을 만들어두자

가장 좋은 공부 방법은 교육

대체로, 옳은 기술은 없다. 상황에 따른 선택만이 있을 뿐
- 때로는 알면서도 비효율적인 선택을 해야할 때가 있다

프론트엔드 개발자는 절반쯤은 UX 전문가가 되어야 한다
- 코드 너머에 사용자가 있다

풀스택 엔지니얼이 지식을 익히되 풀스택 엔지니어를 지향하지는 말자
- 하나 잘하기도 점점 더 어려워지고 있다. 전문 분야를 가지자

'안 된다'는 말은 그만.
- (그 일정과 그 비용으로는) 안 돼요

거절의 3단계
- 숙고 / 대안 제시 / 이득

이직은 늘 준비하는 것
- 커리어, 연봉, 워라벨
- 커리어 = 시간 + 스토리

성과급/복지보다는 연봉

기술 중요
- 단순 작업은 안됨

뱀의 머리보다는 용의 꼬리가 낫다
- 하드캐리 할 자신 있으면 예외

호인과 호구는 다르다
- 큰 노력이 필요하지 않은 친절은 배풀자

실무 능력
- 프로그래밍 스킬(구현) + 도메인 지식 (문제 정의, 해당 비즈니스에 관한 전문 지식) + 커뮤니케이션(협업)

독서하듯 코드를 읽자

문제는 시스템으로 예방하자

divide and conquer
- 문제가 작을수록 해결하기 쉽다

질문에도 기술이 있다
- 의도를 정확하게 전달
- 노력하는 15분

시간은 금이다
- 돈 주고 사라는 뜻

너무 열심히 안 살아도 된다
- 어제보다는 나아지자!

전문가 얘기 너무 많이 듣지 말자
- 내 문제는 내가 제일 잘 안다

############################

포트폴리오에 대한 오해와 진실
- 포트폴리오는 옵션이다
- 포트폴리오는 개발 프로젝트가 아니라 나의 성과 집약체이다.
-- 언어는 통일
- 포트폴리오 내 개발 프로젝트는 많을수록 좋은 것이 아니라 완성도가 높을수록 좋다
- 포트폴리오는 형식에 상관 없이 그 어떤 것도 괜찮다

성공적인 프로젝트 만들기
- 프로젝트의 중요성
-- 학습과 취업
- 프로젝트를 통한 학습 과정
-- 문제 발견 -> 문제 구체화 & 해결 -> 개발 
-- 문제 구체화에서 개념 발견, 학습, 블로그로 남기기, 발표
- react, react-redux 애플리케이션 2~3개 만들기
-- ES6 문법, 리액트, 리액트 훅, 컴포넌트 캐념을 알고 있을까?
- next.js, recoil 등 유행하는 라이브러리를 써도 되지만
-- 기본적인 리엑트와 자스는 알고가자...

정리
- 기초에 충실
- 1~2달 규모
- 디자인보다는 코드 품질
- 프로젝트 소개서 잘 쓰기
- 동료의 코드 리뷰
- 배포

트렌드에 너무 따라가지 말라,,~
중요한건 우리가 배우는 4가지다,,
- HTML/CSS/JS/React
+ 타입스크립트 까지 ~

이력서와 링크드인 작성 팁
- 제일 중요! 직무 연관성

기술 및 행동 인터뷰 준비
- 기술 인터뷰
-- 리엑트, 자스

깃허브
- 테스크 별로 쪼개서 커밋하기
- 주우석
- 통일성
















